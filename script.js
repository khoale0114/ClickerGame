// script.js
let score = 0;
let all_score = score;
let click = 0.2;
let cps = 0;
let chef = 0;
let farmer = 0;
let miner = 0;
let factory = 0;
let bank = 0;
let temple = 0;
let wizard = 0;
let space = 0;
let portal = 0;
let time = 0;
let light = 0;
let lastUpdateTime = Date.now();

const scoreDisplay = document.getElementById('score');
const clickButton = document.getElementById('clickButton');
const upgradesList = document.getElementById('upgrades-list');
const achievementsList = document.getElementById('achievements-list'); // Th√™m ph·∫ßn t·ª≠ ƒë·ªÉ hi·ªÉn th·ªã achievements
const shopList = document.getElementById("shop-list");
const toastContainer = document.getElementById('toast-container'); // Ph·∫ßn t·ª≠ ch·ª©a th√¥ng b√°o


const shopItems = [
  {
    name: "ü•á Super Chef",
    cost: 1200,
    description: "ƒêi·ªÉm click v√† CPS s·∫Ω b·∫±ng s·ªë ƒëi·ªÉm click * CPS",
    effect: () => {
      click = click * cps; // Nh√¢n ƒëi·ªÉm click l√™n s·ªë CPS hi·ªán t·∫°i
      cps = click * cps; // TƒÉng gi√° tr·ªã click l√™n 5
    }
  },
  {
    name: "‚ú® Golden Click",
    cost: 2800,
    description: "TƒÉng gi√° tr·ªã m·ªói l·∫ßn click l√™n 30.",
    effect: () => click += 30
  },
  {
    name: "üîç Tuy·ªÉn ch·ªçn",
    cost: 2000,
    description: "TƒÉng CPS l√™n 10",
    effect: () => cps += 10
  },
  {
    name: "üõ†Ô∏è S·ª≠a ch·ªØa",
    cost: 6800,
    description: "TƒÉng gi√° tr·ªã m·ªói l·∫ßn click l√™n 80.",
    effect: () => click += 80
  }
];


// Danh s√°ch n√¢ng c·∫•p c√≥ th·ªÉ mua nhi·ªÅu l·∫ßn
const upgrades = [
  { name: 'üéØ Luy·ªán t·∫≠p', cost: 10, level: 0, type: 'click', effect: () => click += 0.1, cpsIncrease: 0 },
  { name: 'üßë‚Äçüç≥ ƒê·∫ßu b·∫øp', cost: 200, level: 0, type: 'chef', effect: () => {cps += 0.2, chef += 1}, cpsIncrease: 0.2 },
  { name: 'üßë‚Äçüåæ N√¥ng d√¢n', cost: 800, level: 0, type: 'farmer', effect: () => {cps += 2, farmer += 1}, cpsIncrease: 2 },
  { name: '‚õèÔ∏è Th·ª£ m·ªè', cost: 1_700, level: 0, type: 'miner', effect: () => {cps += 7, miner += 1}, cpsIncrease: 7 },
  { name: 'üè≠ Nh√† m√°y', cost: 53_000, level: 0, type: 'factory', effect: () => {cps += 40, factory += 1}, cpsIncrease: 40 },
  { name: 'üè¶ Ng√¢n h√†ng', cost: 2_480_000, level: 0, type: 'bank', effect: () => {cps += 100, bank += 1}, cpsIncrease: 100 },
  { name: 'üõï ƒê·ªÅn th·ªù', cost: 8_520_000, level: 0, type: 'temple', effect: () => {cps += 400, temple += 1}, cpsIncrease: 400 },
  { name: 'üßô T√≤a th√°p ph√°p s∆∞', cost: 20_610_000, level: 0, type: 'wizard', effect: () => {cps += 5_000, wizard += 1}, cpsIncrease: 5_000 },
  { name: 'üöÄ Du h√†nh kh√¥ng gian', cost: 843_700_000, level: 0, type: 'space', effect: () => {cps += 100_000, space += 1}, cpsIncrease: 100_000 },
  { name: 'ü™û C·ªïng kh√¥ng gian', cost: 740_000_000_000, level: 0, type: 'portal', effect: () => {cps += 2_000_000, portal += 1}, cpsIncrease: 2_000_000 },
  { name: 'üïí Du h√†nh th·ªùi gian', cost: 369_000_000_000_000, level: 0, type: 'time', effect: () => {cps += 570_000_000, time += 1}, cpsIncrease: 570_000_000 },
  { name: '‚ú® C√¥ng ngh·ªá n√©n √°nh s√°ng', cost: 2_900_000_000_000_000, level: 0, type: 'light', effect: () => {cps += 29_830_000_000, light += 1}, cpsIncrease: 29_830_000_000 }
];

// Danh s√°ch achievements
const achievements = [
  { name: 'üç™ B·∫Øt ƒë·∫ßu', description: 'Nh·∫•n l·∫ßn ƒë·∫ßu ti√™n', achieved: false, condition: () => score >= 1 },
  { name: 'üí∞ ƒê·∫°i gia', description: 'C√≥ h∆°n 100 ƒëi·ªÉm', achieved: false, condition: () => score >= 100 },
  { name: 'üèÖ B·∫≠c th·∫ßy clicker', description: 'Nh·∫•n 500 l·∫ßn', achieved: false, condition: () => all_score >= 500 },
  { name: 'üßë‚Äçüç≥ Ch·ªß m·ªôt nh√† h√†ng', description: 'Thu√™ m·ªôt ƒë·∫ßu b·∫øp', achieved: false, condition: () => chef >= 1 },
  { name: 'üßë‚Äçüåæ C√¢y ƒë·ªôt bi·∫øn', description: 'Thu√™ m·ªôt n√¥ng d√¢n', achieved: false, condition: () => farmer >= 1},
  { name: '‚õèÔ∏è M·ªè v√†ng', description: 'Thu√™ m·ªôt th·ª£ m·ªè', achieved: false, condition: () => miner >= 1},
  { name: 'üè≠ Nh√† m√°y cookie', description: 'X√¢y nh√† m√°y ƒë·∫ßu ti√™n', achieved: false, condition: () => factory >= 1},
  { name: 'üè¶ Cho vay n·∫∑ng cookie', description: 'X√¢y m·ªôt Ng√¢n h√†ng', achieved: false, condition: () => bank >= 1},
  { name: 'üõï Th·ªù c√∫ng cookie', description: 'X√¢y m·ªôt ƒê·ªÅn th·ªù', achieved: false, condition: () => temple >= 1},
  { name: 'üßô √öm ba la', description: 'X√¢y m·ªôt T√≤a th√°p ph√°p s∆∞', achieved: false, condition: () => wizard >= 1},
  { name: 'üöÄ Du h√†nh kh√¥ng gian', description: 'X√¢y m·ªôt T√†u kh√¥ng gian', achieved: false, condition: () => space >= 1},
  { name: 'üòà ƒê·∫øn gi·ªù ƒÉn tr·ªôm r·ªìi', description: 'X√¢y m·ªôt C·ªïng kh√¥ng gian', achieved: false, condition: () => portal >= 1},
  { name: 'üïí Doraemon', description: 'X√¢y m·ªôt Du h√†nh th·ªùi gian', achieved: false, condition: () => time >= 1},
  { name: '‚ú® Thi√™n t√†i xu·∫•t hi·ªán', description: 'X√¢y m·ªôt C√¥ng ngh·ªá n√©n √°nh s√°ng', achieved: false, condition: () => light >= 1}
];

function isFloat(number) {
  return !Number.isInteger(number);
}

function formatNumber(number) {
  if (number >= 1e12) {
    return (number / 1e12).toFixed(1) + 'T';  // T·ª∑
  } else if (number >= 1e9) {
    return (number / 1e9).toFixed(1) + 'B';  // T·ª∑
  } else if (number >= 1e6) {
    return (number / 1e6).toFixed(1) + 'M';  // Tri·ªáu
  } else if (number >= 1e3) {
    return (number / 1e3).toFixed(1) + 'K';  // Ngh√¨n
  } else if (isFloat(number)) {
    return parseFloat(number.toFixed(1));
  } else {
    return number;
  }
}


function showToast(message) {
  const toast = document.createElement("div");
  toast.className = "toast";
  toast.textContent = message;

  // Th√™m v√†o container ch√≠nh
  toastContainer.appendChild(toast);

  // K√≠ch ho·∫°t animation
  setTimeout(() => {
    toast.classList.add("show");
  }, 100);

  // ·∫®n sau 3 gi√¢y
  setTimeout(() => {
    toast.classList.remove("show");
    setTimeout(() => {
      toastContainer.removeChild(toast);
    }, 300);
  }, 3000);
}


// H√†m hi·ªÉn th·ªã danh s√°ch n√¢ng c·∫•p
function displayUpgrades() {
  upgradesList.innerHTML = ''; // X√≥a danh s√°ch hi·ªán t·∫°i
  upgrades.forEach((upgrade, index) => {
    const li = document.createElement('li');
    li.classList.add('upgrade-item');

    // Hi·ªÉn th·ªã th√¥ng tin n√¢ng c·∫•p v·ªõi CPS tƒÉng th√™m v√† gi√° r√∫t g·ªçn
    if (upgrade.type === 'click') {
      li.textContent = `${upgrade.name} - ${formatNumber(upgrade.cost)} ƒëi·ªÉm + 1 ƒëi·ªÉm/click`;
    } else {
      li.textContent = `${upgrade.name} - ${formatNumber(upgrade.cost)} ƒëi·ªÉm +${formatNumber(upgrade.cpsIncrease)} CPS`;
    }

    // Hi·ªÉn th·ªã m√¥ t·∫£ khi hover v√†o n√¢ng c·∫•p
    li.title = getUpgradeDescription(upgrade);

    // C·∫≠p nh·∫≠t m√†u s·∫Øc cho item n√¢ng c·∫•p
    li.style.color = score >= upgrade.cost ? '#fff' : '#828282';

    // Khi click v√†o s·∫Ω mua n√¢ng c·∫•p
    li.addEventListener('click', () => buyUpgrade(index));

    upgradesList.appendChild(li);
  });
}



// H√†m mua n√¢ng c·∫•p (c√≥ th·ªÉ mua nhi·ªÅu l·∫ßn)
function buyUpgrade(index) {
  const upgrade = upgrades[index];
  if (score >= upgrade.cost) {
    score -= upgrade.cost; // Tr·ª´ ƒëi·ªÉm
    upgrade.level++; // TƒÉng c·∫•p ƒë·ªô n√¢ng c·∫•p

    // √Åp d·ª•ng effect n√¢ng c·∫•p
    upgrade.effect();

    // TƒÉng gi√° n√¢ng c·∫•p
    upgrade.cost = Math.floor(upgrade.cost * 1.5);

    // C·∫≠p nh·∫≠t l·∫°i ƒëi·ªÉm
    scoreDisplay.textContent = Math.floor(score * 100) / 100;
    displayUpgrades(); // C·∫≠p nh·∫≠t l·∫°i danh s√°ch n√¢ng c·∫•p
  }
}

function getUpgradeDescription(upgrade) {
  switch (upgrade.type) {
    case 'click':
      return `TƒÉng th√™m 1 ƒëi·ªÉm m·ªói l·∫ßn nh·∫•n`;
    case 'chef':
      return `TƒÉng CPS m·ªói gi√¢y, gi√∫p b·∫°n nh·∫≠n ƒëi·ªÉm t·ª± ƒë·ªông.`;
    case 'farmer':
      return `TƒÉng CPS m·ªói gi√¢y, gi√∫p b·∫°n nh·∫≠n ƒëi·ªÉm t·ª± ƒë·ªông.`;
    case 'miner':
      return `TƒÉng CPS m·ªói gi√¢y, gi√∫p b·∫°n nh·∫≠n ƒëi·ªÉm t·ª± ƒë·ªông.`;
    case 'factory':
      return `TƒÉng CPS m·ªói gi√¢y, gi√∫p b·∫°n nh·∫≠n ƒëi·ªÉm t·ª± ƒë·ªông.`;
    case 'bank':
      return `TƒÉng CPS m·ªói gi√¢y, gi√∫p b·∫°n nh·∫≠n ƒëi·ªÉm t·ª± ƒë·ªông.`;
    case 'temple':
      return `TƒÉng CPS m·ªói gi√¢y, gi√∫p b·∫°n nh·∫≠n ƒëi·ªÉm t·ª± ƒë·ªông.`;
    case 'wizard':
      return `TƒÉng CPS m·ªói gi√¢y, gi√∫p b·∫°n nh·∫≠n ƒëi·ªÉm t·ª± ƒë·ªông.`;
    case 'space':
      return `TƒÉng CPS m·ªói gi√¢y, gi√∫p b·∫°n nh·∫≠n ƒëi·ªÉm t·ª± ƒë·ªông.`;
    case 'portal':
      return `TƒÉng CPS m·ªói gi√¢y, gi√∫p b·∫°n nh·∫≠n ƒëi·ªÉm t·ª± ƒë·ªông.`;
    case 'time':
      return `TƒÉng CPS m·ªói gi√¢y, gi√∫p b·∫°n nh·∫≠n ƒëi·ªÉm t·ª± ƒë·ªông.`;
    case 'light':
      return `TƒÉng CPS m·ªói gi√¢y, gi√∫p b·∫°n nh·∫≠n ƒëi·ªÉm t·ª± ƒë·ªông.`;
    default:
      return '';
  }
}

// H√†m c·∫≠p nh·∫≠t ƒëi·ªÉm m·ªói gi√¢y (CPS)
function updateCPS() {
  let currentTime = Date.now();
  let timeElapsed = (currentTime - lastUpdateTime) / 1000;
  if (timeElapsed >= 1) {
    click = formatNumber(click);
    cps = calculateCPS(); // C·∫≠p nh·∫≠t l·∫°i CPS m·ªói gi√¢y
    score += cps; // Th√™m CPS v√†o ƒëi·ªÉm
    score = Math.floor(score * 100) / 100; // Gi·ªõi h·∫°n s·ªë ƒëi·ªÉm
    scoreDisplay.textContent = formatNumber(score); // C·∫≠p nh·∫≠t ƒëi·ªÉm hi·ªÉn th·ªã
    lastUpdateTime = currentTime;
    checkAchievements(); // Ki·ªÉm tra achievements
  }
}


function calculateCPS() {
  // T√≠nh t·ªïng CPS d·ª±a tr√™n c√°c n√¢ng c·∫•p v√† v·∫≠t ph·∫©m ƒë√£ mua
  let totalCPS = 0;

  // Th√™m CPS t·ª´ c√°c n√¢ng c·∫•p (nh∆∞ Chef, Farmer, Miner...)
  upgrades.forEach((upgrade) => {
    if (upgrade.level > 0) {
      totalCPS += upgrade.cpsIncrease * upgrade.level;
    }
  });

  return totalCPS;
}

let showAllItems = false; // Tr·∫°ng th√°i hi·ªÉn th·ªã to√†n b·ªô v·∫≠t ph·∫©m

function renderShop() {
  shopList.innerHTML = ""; // X√≥a danh s√°ch c≈©

  let itemsToShow = showAllItems ? shopItems.length : 4; // Hi·ªÉn th·ªã t·ªëi ƒëa 4 item

  shopItems.slice(0, itemsToShow).forEach((item, index) => {
    const li = document.createElement("li");
    li.className = "shop-item";

    // Hi·ªÉn th·ªã icon, ·∫©n t√™n (t√™n s·∫Ω hi·ªÉn th·ªã trong title)
    li.textContent = item.name.split(" ")[0];

    // Th√™m title ch·ª©a th√¥ng tin
    li.title = `${item.name}\nGi√°: ${item.cost} points\n${item.description}`;

    li.onclick = () => buyItem(index);

    shopList.appendChild(li);
  });

  // T√¨m n√∫t "Xem t·∫•t c·∫£" n·∫øu c√≥ nhi·ªÅu h∆°n 3 v·∫≠t ph·∫©m
  let toggleButton = document.querySelector(".shop-toggle");

  // N·∫øu n√∫t ƒë√£ t·ªìn t·∫°i, x√≥a n√≥
  if (toggleButton) {
    toggleButton.remove();
  }

  if (shopItems.length > 3) {
    toggleButton = document.createElement("button");
    const tbd = document.querySelector(".std");
    toggleButton.textContent = showAllItems ? "‚ûñ" : "‚ûï";
    toggleButton.className = "shop-toggle";

    toggleButton.onclick = () => {
      showAllItems = !showAllItems; // ƒê·∫£o tr·∫°ng th√°i
      renderShop();
      toggleUpgrades(!showAllItems); // R√∫t g·ªçn upgrades n·∫øu m·ªü r·ªông shop
    };

    tbd.appendChild(toggleButton);
  }
}

const shopContainer = document.querySelector('.shop-container');
const updateContainer = document.querySelector('.update-container');


function toggleUpgrades(visible) {
  upgradesList.style.display = visible ? "block" : "none";

  // L·∫•y chi·ªÅu cao c·ªßa shop
  const shopContainer = document.querySelector('.shop-container');
  const updateContainer = document.querySelector('.update-container');

  if (visible) {
    // N·∫øu n√¢ng c·∫•p ƒë∆∞·ª£c hi·ªÉn th·ªã, ƒëi·ªÅu ch·ªânh v·ªã tr√≠ c·ªßa ph·∫ßn n√¢ng c·∫•p
    const shopHeight = shopContainer.offsetHeight;
    updateContainer.style.top = `${shopHeight + 20}px`; // ƒê·∫©y ph·∫ßn n√¢ng c·∫•p xu·ªëng d∆∞·ªõi shop
  } else {
    // N·∫øu n√¢ng c·∫•p kh√¥ng ƒë∆∞·ª£c hi·ªÉn th·ªã, ƒë·∫∑t l·∫°i v·ªã tr√≠
    updateContainer.style.top = `${shopContainer.offsetHeight + 10}px`; // ƒê·∫£m b·∫£o kho·∫£ng c√°ch
  }
}


function buyItem(index) {
  const item = shopItems[index];

  if (score >= item.cost) {
    score -= item.cost;
    item.effect(); // √Åp d·ª•ng hi·ªáu ·ª©ng v·∫≠t ph·∫©m
    showToast(`You bought ${item.name}!`);
  } else {
    showToast("Not enough points!");
  }
}

// Khi ng∆∞·ªùi ch∆°i nh·∫•n v√†o n√∫t
clickButton.addEventListener('click', (event) => {
  score += click; // TƒÉng ƒëi·ªÉm theo s·ªë l∆∞·ª£ng click hi·ªán t·∫°i
  all_score += click;
  scoreDisplay.textContent = formatNumber(score); // C·∫≠p nh·∫≠t ƒëi·ªÉm hi·ªÉn th·ªã
  displayUpgrades(); // C·∫≠p nh·∫≠t danh s√°ch n√¢ng c·∫•p
  checkAchievements(); // Ki·ªÉm tra achievements khi nh·∫•n

  // T·∫°o ph·∫ßn t·ª≠ hi·ªÉn th·ªã s·ªë ƒëi·ªÉm c·ªông th√™m
  const clickDisplay = document.createElement('div');
  clickDisplay.classList.add('click-display');
  clickDisplay.textContent = `+${click}`;

  // L·∫•y v·ªã tr√≠ con tr·ªè chu·ªôt khi nh·∫•n v√†o button
  const mouseX = event.clientX;
  const mouseY = event.clientY;

  // ƒê·∫∑t ph·∫ßn t·ª≠ t·∫°i v·ªã tr√≠ con tr·ªè chu·ªôt
  clickDisplay.style.left = `${mouseX}px`;
  clickDisplay.style.top = `${mouseY}px`;

  // Th√™m ph·∫ßn t·ª≠ v√†o body
  document.body.appendChild(clickDisplay);

  // Hi·ªáu ·ª©ng di chuy·ªÉn v√† m·ªù d·∫ßn
  clickDisplay.style.animation = 'moveAndFade 0.5s ease forwards';

  // Ph·∫ßn t·ª≠ s·∫Ω t·ª± ƒë·ªông bi·∫øn m·∫•t sau hi·ªáu ·ª©ng
  setTimeout(() => {
    clickDisplay.style.opacity = 0; // D·∫ßn d·∫ßn bi·∫øn m·∫•t
  }, 200);

  setTimeout(() => {
    document.body.removeChild(clickDisplay); // X√≥a ph·∫ßn t·ª≠ sau khi hi·ªáu ·ª©ng ho√†n th√†nh
  }, 500);
});

function upadateScore() {
  setTimeout(() => {
    scoreDisplay.textContent = formatNumber(score);
  }, 200);
}

// H√†m ki·ªÉm tra achievements
function checkAchievements() {
  achievements.forEach((achievement) => {
    if (!achievement.achieved && achievement.condition()) {
      achievement.achieved = true; // ƒê√°nh d·∫•u achievement ƒë√£ ƒë·∫°t ƒë∆∞·ª£c
      showAchievementToast(achievement); // Hi·ªÉn th·ªã th√¥ng b√°o achievement
      addAchievementToList(achievement); // Th√™m achievement v√†o danh s√°ch hi·ªÉn th·ªã
    }
  });
}

// H√†m hi·ªÉn th·ªã th√¥ng b√°o achievement (Toast)
function showAchievementToast(achievement) {
  const toast = document.createElement('div');
  toast.classList.add('toast');
  toast.textContent = `B·∫°n ƒë√£ ƒë·∫°t ƒë∆∞·ª£c achievement: ${achievement.name}`;

  // Th√™m v√†o container
  toastContainer.appendChild(toast);

  // Hi·ªÉn th·ªã th√¥ng b√°o v√† t·ª± ƒë·ªông ·∫©n sau 4 gi√¢y
  setTimeout(() => {
    toast.classList.add('show');
  }, 100);

  setTimeout(() => {
    toast.classList.remove('show');
    setTimeout(() => {
      toastContainer.removeChild(toast);
    }, 300);
  }, 4000);
}

// H√†m th√™m achievement v√†o danh s√°ch hi·ªÉn th·ªã
function addAchievementToList(achievement) {
  const li = document.createElement('li');
  li.textContent = `${achievement.name}: ${achievement.description}`;
  achievementsList.appendChild(li);

  // ·∫®n th√¥ng b√°o "B·∫°n ch∆∞a c√≥ th√†nh t·ª±u n√†o c·∫£" khi c√≥ th√†nh t·ª±u
  const noAchievements = document.getElementById('no-achievements');
  if (noAchievements) {
    noAchievements.style.display = 'none'; // ·∫®n th√¥ng b√°o khi c√≥ th√†nh t·ª±u
  }
}

function adjustUpgradePosition() {
  const shopContainer = document.querySelector('.shop-container');
  const updateContainer = document.querySelector('.update-container');

  // L·∫•y chi·ªÅu cao c·ªßa shop
  const shopHeight = shopContainer.offsetHeight;

  // ƒê·∫∑t v·ªã tr√≠ c·ªßa ph·∫ßn n√¢ng c·∫•p ngay d∆∞·ªõi ph·∫ßn shop
  updateContainer.style.top = `${shopHeight + 20}px`; // Th√™m kho·∫£ng c√°ch
}


// C·∫≠p nh·∫≠t CPS m·ªói gi√¢y
setInterval(updateCPS, 1000);

// Hi·ªÉn th·ªã n√¢ng c·∫•p khi trang t·∫£i xong
displayUpgrades();

// G·ªçi h√†m render shop khi game kh·ªüi ƒë·ªông
renderShop();
adjustUpgradePosition();
